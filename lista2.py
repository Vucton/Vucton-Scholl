# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UUsjb52b2beSYaOfX7KyLs9UFkBCgCLK


"""#Exemplos do Material do Professor:"""

#Refazendo os exemplos da classes em python
"""
class Exemplo:
  def __init__(self, a, b):
    self.a=a
    self.b=b

  def f(self, x):
    return self.a*x+self.b

ob = Exemplo(2,3)
ob.f(7)
print(ob.f(7))

ob2 = Exemplo(8,1)
print(ob2.f(7))
"""

#Classe Retangulo
class Retangulo:
  lado_a = None
  lado_b = None

  def __init__(self, a, b):
    self.lado_a = a
    self.lado_b = b
    print('Criada uma nova instância Retangulo')

  def calcula_area(self):
    return self.lado_a*self.lado_b
  def calcula_perimetro(self):
    return 2 * self.lado_a + 2 * self.lado_b

#criando uma nova instancia Retangulo
obj = Retangulo(4,6)
#print(obj.calcula_area())
print(obj.calcula_perimetro())

"""#Lista de exercicios 2

Questão 1:
"""

class Triangulo:
  def __init__(self, a, b, c):
    self.lado_a = a
    self.lado_b = b
    self.lado_c = c

  def calcular_perimetro(self):
    return self.lado_a +self.lado_b + self.lado_c

  def getMaiorLado(self):
    if(self.lado_a > self.lado_b and self.lado_a > self.lado_c):
      return self.lado_a
    elif(self.lado_b > self.lado_a and self.lado_b > self.lado_c):
      return self.lado_b
    else:
      return self.lado_c

tri = Triangulo(3,5,4)
print('Maior lado do triangulo é ',tri.getMaiorLado())
print('Perimetro do Triangulo', tri.calcular_perimetro())

"""Questão 2:"""

class Funcionario:
  def __init__(self, nome, salario):
    self.nome = nome
    self.salario = salario

  def aumentarSalario(self, porcentagem):
    porcentagem /=100

    self.salario += self.salario * porcentagem
    return 'O salario de joão aumentou para ',self.salario

joao = Funcionario('João', 1500)

joao.aumentarSalario(15)

"""Questão 3:"""

class Livro:
  def __init__(self, nome, qtdPaginas, autor ,preco):
    self.nome = nome
    self.qtdPaginas = qtdPaginas
    self.autor = autor
    self.preco = preco


  def getPreco(self):
    return self.preco

  def setPreco(self, p):
    self.preco = p

harryPotter = Livro('A pedra filosofal', 327, 'J. K. Rowling', 69.35)
print('Preço: R$',harryPotter.getPreco())
harryPotter.setPreco(39.50)
print('Preço do libro atualizado: R$',harryPotter.getPreco())

"""Questão 4:"""

class Aluno:
  nome = None
  curso = None
  tempoSemDormir = None

  def __init__(self, nome, curso):
    self.nome = nome
    self.curso = curso

  def estudar(self, qtdHoras):
    self.qtdHorasEstudadas = qtdHoras
    self.tempoSemDormir = qtdHoras/2

  def dormir(self, qtdHoras):
    self.tempoSemDormir-=qtdHoras

  def status(self):
    print('Tempo sem dormir:',self.tempoSemDormir,'horas')
    print('Tempo de estudo:',self.qtdHorasEstudadas,'horas')

joao = Aluno('Victor', 'ADS')
joao.estudar(8)
joao.status()

"""Questão 5:"""

class Carro:

  combustivel = 0

  def __init__(self, consumo):
    self.consumo = consumo

  def andar(self, distancia):
    self.combustivel -= distancia / self.consumo

  def obterGasolina(self):
    return self.combustivel

  def abastecer(self, gas):
    self.combustivel += gas

meuFusca = Carro(15) #15km/l consumo
print(meuFusca.abastecer(20)) #abastece com 20 litros de combustível como no exemplo
print(meuFusca.andar(130)) #disttancia que irá percorrer
print(meuFusca.obterGasolina()) #resultado

"""Questão 6:"""

class Aluno:
  def __init__(self, nome, cpf):
    self.nome = nome
    self.cpf = cpf

class Equipe:
  def __init__(self):
    lista_de_participantes = []
    projeto = None

class GerenciadorEquipes:
  def __init__(self)
    lista_de_equipes = []

  def criarEquipe(self,lista= [] ):